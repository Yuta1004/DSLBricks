use blockdsl::processor::parser::syntax::ASyntax;
use blockdsl::processor::parser::LR1;
use blockdsl::processor::macros::*;
use blockdsl::processor::prelude::*;
use blockdsl::processor::DSL;

type {NAME} = DSL::<{NAME}ASyntax, {NAME}Syntax, {NAME}Token>;

#[lexer]
pub enum {NAME}Token \{
    {TOKEN_DEFS}
}

#[parser(
    kind => LR1,
    token => {NAME}Token,
    semantics => {NAME}ASyntax,
    bnf => {BNF}
)]
pub enum {NAME}Syntax \{
    {SYNTAX_DEFS}
    IgnoredRule
}

#[derive(Debug)]
pub struct {NAME}ASyntax;

impl ASyntax<{NAME}Syntax, {NAME}Token> for {NAME}ASyntax \{
    #[allow(unused_variables, unused_mut)]
    fn mapping(
        syntax: {NAME}Syntax,
        mut tokens: Vec<(Option<Box<Self>>, Option<&str>)>,
    ) -> anyhow::Result<Box<{NAME}ASyntax>> \{
        Ok(Box::new({NAME}ASyntax))
    }
}
