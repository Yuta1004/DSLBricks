use blockdsl::processor::parser::syntax::ASyntax;
use blockdsl::processor::parser::LR1;
use blockdsl::processor::macros::*;
use blockdsl::processor::prelude::*;
use blockdsl::processor::DSL;

#[lexer]
pub enum {NAME}Token \{
    {TOKEN_DEFS}
}

#[parser(
    kind => LR1,
    token => {NAME}Token,
    semantics => {NAME}Semantics,
    bnf => {BNF}
)]
pub enum {NAME}Syntax \{
    {SYNTAX_DEFS}
}

#[derive(Debug)]
pub struct {NAME}Semantics;

impl ASyntax<{NAME}Syntax, {NAME}Token> for {NAME}Semantics \{
    fn mapping(
        syntax: {NAME}Syntax,
        mut tokens: Vec<(Option<Box<Self>>, Option<&str>)>,
    ) -> anyhow::Result<Box<{NAME}Semantics>> \{
        Ok(Box::new({NAME}Semantics))
    }
}
